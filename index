phỏng vấn React

#1. ReactJs là gì? ReactJs hoạt động như thế nào?
ReactJS là một opensource được phát triển bởi Facebook, ra mắt vào năm 2013, bản thân nó là một thư viện javascript dùng để xây dựng UI, UI ở đây được dùng chính ở 2 nền tảng Web và Mobile. Ở lĩnh vực Web, sử dụng Reactjs có thể đem lại trải nghiệm tốt cho người dùng, cũng như khả năng Hot Reload giúp bạn lập trình nhanh hơn.
ReactJS hoạt động bằng cách sử dụng Virtual DOM và mô hình one-way data binding. Nó xây dựng giao diện người dùng thành các thành phần, sử dụng JSX để mô tả cấu trúc. Khi dữ liệu hoặc trạng thái thay đổi, React kích thích Reconciliation để cập nhật chỉ những phần thay đổi trong DOM thực sự, tối ưu hóa hiệu suất ứng dụng web.

#2. Ưu và nhược điểm của ReactJs?
Ưu điểm:
Dễ dàng tạo các ứng dụng động: React giúp tạo các ứng dụng web động dễ dàng hơn vì ít code hơn mà lại cung cấp nhiều chức năng hơn, trong khi với các ứng dụng JavaScript, cách code thường có xu hướng trở nên phức tạp.
Hiệu suất cải thiện: React sử dụng DOM ảo, giúp các ứng dụng web hoạt động nhanh hơn. Virtual DOM so sánh trạng thái trước đó của nó và chỉ cập nhật các thành phần có trạng thái thay đổi trong DOM thực thay vì cập nhật tất cả các thành phần, như các ứng dụng web thông thường.
Các thành phần có thể tái sử dụng: Các components là nền tảng của bất kỳ ứng dụng React nào và một ứng dụng đơn lẻ thường bao gồm nhiều components. Các components này có logic và các điều khiển riêng và chúng có thể được tái sử dụng thông qua ứng dụng, do đó làm giảm đáng kể thời gian phát triển một ứng dụng.
Luồng dữ liệu một chiều: React tuân theo luồng dữ liệu một chiều. Điều này có nghĩa là khi thiết kế một ứng dụng React, chúng ta thường lồng các thành phần con vào bên trong các thành phần mẹ. Và vì dữ liệu chảy theo một hướng, nên việc debug và biết vấn đề xảy ra ở đâu trong ứng dụng sẽ trở nên dễ dàng hơn.
Các công cụ chuyên dụng để debug dễ dàng: Facebook đã phát hành một tiện ích mở rộng Chrome mà chúng ta có thể sử dụng để debug các ứng dụng React. Điều này làm cho quá trình gỡ lỗi React cho các ứng dụng web nhanh hơn và dễ dàng hơn.
Nhược điểm:
React không phải là một framework toàn diện vì nó chỉ là một thư viện.
Các thành phần của React rất nhiều và sẽ mất thời gian để nắm bắt đầy đủ lợi ích của tất cả.
Các lập trình viên mới bắt đầu có thể khó nắm bắt các khái niệm về React.
Việc mã hóa có thể trở nên phức tạp vì nó sẽ sử dụng khuôn mẫu nội tuyến và JSX.

#3. Virtual DOM là gì ?
React giữ một bản “đại diện” nhưng nhẹ hơn của DOM “thực” trong bộ nhớ, gọi là DOM ảo (Virtual DOM). Khi trạng thái của một đối tượng (object) thay đổi, DOM ảo chỉ thay đổi đối tượng đó trong DOM thực, thay vì cập nhật tất cả các đối tượng.

#4. Single Page Application là gì ?
· Được cho là cách tiếp cận hiện đại hơn
· Không yêu cầu tải lại trang trong quá trình sử dụng
· Kiến trúc 1 trang
· Nhanh hơn khi sử dụng (vì tải hết 1 lần và lưu tại RAM) vì phần lớn tài nguyên chỉ tải trong lần đầu và chỉ tải thêm dữ liệu mới khi cần
· Nhưng lần đầu tải có thể bị chậm nếu tối ưu không tốt
· Không thân thiện với SEO hay Search Engine Optimization (tối ưu hóa công cụ tìm kiếm)
· VD: Facebook, Shoppe, ZingMP3

#5. Sự khác nhau giữa class component và functional component ?
Class Components: có thể giữ hoặc quản lý state. Phức tạp hơn so với stateless component. Có thể hoạt động với tất cả lifecycle methods. Có thể tái sử dụng.
Functional Components: không thể giữ hoặc quản lý state. Đơn giản và dễ hiểu. Không thể hoạt động với lifecycle method nào. Không thể tái sử dụng.

#6. Hãy trình bày những giai đoạn có trong life cycle của một component ?
· Khởi tạo
· Cập nhật State/Property
· Destruction - lifecycle of React

#7. Những điều kiện nào làm cho một component rerender ?
Có sự thay đổi trong state (setState).
Nhận props mới từ component cha.
Gọi các phương thức lifecycle như componentDidMount, componentDidUpdate, componentWillUnmount.
Sử dụng forceUpdate.
Có sự thay đổi trong Context API, Redux, hoặc MobX.
Xảy ra lỗi và component được bao bọc bởi Error Boundary.
Có sự thay đổi trong state hoặc dependencies của useState và useEffect Hooks.

#8. JSX là gì ? Browser có thể đọc được JSX hay không ?
JSX là một phần mở rộng cú pháp cho JavaScript. JSX được sử dụng với React để mô tả giao diện người dùng trông như thế nào. Bằng cách sử dụng JSX, chúng ta có thể viết các cấu trúc HTML trong cùng một tệp chứa code JavaScript.
Browser có thể đọc được JSX hay không?
Trình duyệt web không thể đọc JSX một cách trực tiếp. Điều này là do chúng được xây dựng để chỉ đọc các đối tượng JS thông thường và JSX không phải là một đối tượng JavaScript thông thường.
Để trình duyệt web có thể đọc được tệp JSX, tệp cần được chuyển đổi thành một đối tượng JavaScript thông thường. Để làm điều này, chúng tôi sử dụng Babel.

#9. Stateless component và Statefull component khác nhau thế nào ?
Stateless Components không sử dụng trạng thái (state), điều này có nghĩa là chúng không theo dõi sự thay đổi của dữ liệu và không thể tự cập nhật lại bản thân.
Statefull sử dụng trạng thái (state) để theo dõi và lưu trữ dữ liệu. Có thể tự cập nhật lại bản thân khi trạng thái thay đổi.

#10. Presentational component và Container component khác nhau như thế nào ?
Presentational component: Chủ yếu chịu trách nhiệm hiển thị giao diện người dùng. Không chứa logic nghiệp phức tạp hoặc xử lý dữ liệu. Nhận dữ liệu từ props và hiển thị mà không thực hiện xử lý logic nào. Thường được gọi là "dumb component."
Container component: Chịu trách nhiệm quản lý trạng thái, dữ liệu, và xử lý logic nghiệp. Chứa logic nghiệp phức tạp và xử lý dữ liệu. Quản lý trạng thái và có thể truyền dữ liệu xuống các presentational components. Thường được gọi là "smart component."

#11. Controlled component và Uncontrolled component khác nhau như thế nào ?
Một Controlled Component là một component nhận giá trị hiện tại của nó thông qua các props và thông báo các thay đổi thông qua các lệnh gọi lại như onChange. Một component mẹ “điều khiển” nó bằng cách xử lý callback và quản lý state của chính nó và chuyển các giá trị mới làm props cho controlled component. Bạn cũng có thể gọi đây là một “thành phần câm” (dumb component)
Uncontrolled component là một component lưu trữ state riêng của nó trong nội bộ và bạn truy vấn DOM bằng cách sử dụng tham chiếu để tìm giá trị hiện tại của nó khi bạn cần. Điều này giống HTML truyền thống.
Controlled components là một component kiểm soát các phần tử đầu vào (input elements).

#12. Khi cần hiển thị một list component ra giao diện bạn làm như thế nào ?
Sử dụng phương pháp .map() để tạo các component từ một mảng dữ liệu và sau đó render chúng trong JSX.

#13. Tại sao mỗi thành phần trong list cần có key ? Keys được dùng để làm gì ?
-Mỗi thành phần trong một danh sách trong React cần có một thuộc tính key để giúp React nhận biết và hiệu quả quản lý các thay đổi trong danh sách.
-Khi thực hiên render một tập hợp trong React, việc thêm một key cho mỗi thành phần được lặp lại là cần thiết để giúp React theo dấu mối liên kết giữa các thành phần và dữ liệu. Key nên là một ID duy nhất, lý tưởng nhất nên là một UUID hay một chuỗi duy nhất khác từ tập hợp phần tử, hoặc cũng có thể là index của array.

#14. React Portal là gì ? Hãy cho ví dụ ứng dụng React Portal ?
React Portal cung cấp cách hiện nội dung của thành phần bên ngoài hệ thông phân cấp thành phần cha của nó. Nói cách khác chúng cho phép bạn hiện một đầu ra của thành phần vào một phần tử DOM khác mà không phải con của thành phần hiện tại.
React Portal hữu ích trong nhiều trường hợp:
· Modal và overlay. Khi bạn cần hiện hội thoại modal hoặc overlay, kết xuất chúng ở mức độ trên cùng của DOM. Điều này đảm bảo các kiểu hay bố cục của phần tử cha không giới hạn chúng.
· Tích hợp bên thứ ba. Khi tích hợp các thư viện bên thứ ba dự kiến hiện ở những vị trí DOM cụ thể.
· Menu ngữ cảnh. Tạo menu ngữ cảnh phản hồi tương tác người dùng mà bạn cần xác định vị trí tương đối với cổng xem hoặc một phần tử DOM cụ thể.
· Tooltip và popup. Khi tooltip hoặc popup phải hiện ở phía trên các thành phần khác, bất kể chúng ở vị trí nào trong cây thành phần.

#15. React Hook là gì ? Hãy kể tên những hooks mà bạn biết ? Các ưu điểm của React Hooks ?
React Hooks là các hàm tích hợp cho phép các nhà phát triển sử dụng các phương thức trạng thái và vòng đời trong các thành phần React. Đây là những tính năng mới được bổ sung có sẵn trong phiên bản React 16.8. Mỗi vòng đời của một thành phần có 3 giai đoạn bao gồm gắn kết, ngắt kết nối và cập nhật.
Cùng với đó, các thành phần có thuộc tính và trạng thái. Hooks sẽ cho phép các nhà phát triển sử dụng các phương pháp này để cải thiện việc tái sử dụng mã với tính linh hoạt cao hơn trong việc điều hướng cây thành phần.
Có một vài lợi ích khi sử dụng React Hook là:
- Xoá bỏ sự cần thiết của component dựa theo class, các vòng đời và keyword this
- Dễ dàng tái sử dụng logic, bằng cách trừu tượng hoá các chức năng phổ biến thành custom hook.
- Code dễ đọc, dễ test bằng cách chia sẻ logic giữa các component với nhau.

#16. Sự khác nhau giữa React class và React hook ?
- Trước phiên bản React 16.8 (trước khi giới thiệu hooks), component dựa theo class thường được sử dụng để tạo component, với mục đích để lưu giữ trạng thái bên trong hay tận dụng các phương thức vòng đời
(ví dụ: componentDidMount hay shouldComponentUpdate).
- Function component là cách khác để tạo component nhưng sử dụng các hook để tạo trạng thái và vòng đời của 1 component, function component có nhiều ưu điểm hơn class component và được khuyên dùng.

#17. Props là gì ?
· Props là viết tắt của từ Properties. Đây là một đối tượng tích hợp trong React, lưu trữ giá trị của các thuộc tính của tag và hoạt động tương tự như các thuộc tính HTML.
Props cung cấp cách để truyền dữ liệu từ component này sang component khác. Các props được truyền cho component theo cách giống như các arguments được truyền trong một hàm.

#18. Component con có thể thay đổi trực tiếp giá trị props của component cha không ?
Không vì khi component cha truyền props xuống component con thì component con chỉ có thể đọc mà không thể thay đổi props.

#19. Nếu component cha truyền một props mà component con không sử dụng thù chuyện gì sẽ xảy ra ?
Nếu một component cha truyền một prop mà component con không sử dụng, không có vấn đề lớn xảy ra, và ứng dụng React vẫn sẽ hoạt động bình thường.
Tuy nhiên, việc truyền prop không cần thiết có thể làm cho mã nguồn trở nên không rõ ràng và gây hiểu lầm cho người đọc mã. Trong các tình huống thực tế, tốt nhất là truyền những props thực sự cần thiết để giữ cho mã nguồn linh hoạt và dễ hiểu.

#20. Props có thể truyền qua lại giữa 2 component cùng cấp hay không ?
Trong React, thông thường, các props không thể trực tiếp truyền qua lại giữa hai component cùng cấp (sibling components) mà không thông qua một component cha chung hoặc không sử dụng các kỹ thuật như Context API hoặc Redux.

#21. State là gì ? Tại sao phải gọi setState thay vì trực tiếp thay đổi state ?
State là gì?
· State là một đối tượng (object) React tích hợp được sử dụng để chứa dữ liệu hoặc thông tin về component. State trong một component có thể thay đổi theo thời gian và bất cứ khi nào nó thay đổi, component sẽ render lại.
· Sự thay đổi state có thể xảy ra dưới dạng phản hồi đối với hành động của người dùng hoặc các sự kiện do hệ thống tạo. State xác định hành vi của component và cách component sẽ render.
Tại sao phải gọi setState thay vì trực tiếp thay đổi state?
Phải gọi setState thay vì trực tiếp thay đổi statevì Nếu bạn cố gắng thay đổi một state của component trực tiếp, React sẽ không thể biết được khi nào nó cần phải re-render component. Bằng cách sử dụng phương thức setState(), React có thể cập nhật component của UI.

#22. Làm sao để thay đổi giá trị của state mà không làm component rerender ?
Có thể sử dụng refs để thay đổi giá trị của một biến mà không kích thích việc render lại component.

#23. Khi setState một giá trị bằng giá trị cũ thì component có rerender lại không ?
Khi gọi setState với một giá trị bằng với giá trị hiện tại của state, React vẫn có thể chạy lại hàm render, nhưng không bắt buộc phải render lại giao diện người dùng.

#24. Khi setState, giá trị của state có được cập nhật ngay lập tức hay không ?
Khi bạn gọi phương thức setState trong React, giá trị của state không được cập nhật ngay lập tức. Thay vào đó, React sẽ xếp các công việc cập nhật state vào hàng đợi và thực hiện chúng sau khi hàm hiện tại hoàn tất.

#25. Làm sao để chia sẻ state giữa các components ?
Chia sẻ state giữa các components bằng cách truyền state từ component cha xuống các component con thông qua props.
Đối với các ứng dụng có cấu trúc phức tạp có thể sử dụng Context API.
Sử dụng Redux để lưu trữ state của ứng dụng trong một store và chia sẻ state giữa các components một cách dễ dàng.
Sử dụng Refs

#26. Sự khác nhau giữa state và props ?
State
Chứa dữ liệu về components
Có thể thay đổi
Components con không thể truy cập
Stateless components không thể state
Props
Cho phép truyền dữ liệu từ component sang những components khác
Không thể thay đổi (chỉ đọc)
Component con có thể truy cập
Stateless component có thể có props

#27. Refs là gì ? Sự khác nhau giữa refs và state ?
Refs(References trong React) là thuộc tính giúp lưu trữ tham chiếu đến một phần tử hay thành phần React cụ thể. Chúng được trả về bởi hàm cấu hình thành phần.
Sự khác nhau giữa refs và state
Refs được sử dụng để truy cập và tương tác trực tiếp với DOM hoặc các instance của các component trong React. Thay đổi giá trị của ref không gây kích thích việc render lại (rerender) component.
State được sử dụng để lưu trữ và quản lý trạng thái của component, ảnh hưởng đến việc render lại giao diện người dùng. Khi giá trị của state thay đổi, React sẽ kích thích việc render lại component để cập nhật giao diện.

#28. Có bao nhiêu kiểu ref trong ReactJs ?
Có ba kiểu chính: String Refs, Callback Refs, CreateRef

#29. Làm sao để component cha có thể gọi hàm của component con ? (useImperativeHandle)
Có thể sử dụng Refs

#30. useEffect là gì ? Có những cách dùng useEffect nào ?
useEffect là một hook trong React được sử dụng để thực hiện các hiệu ứng (side effects) trong functional components. Side effects có thể là những hành động như gọi API, thay đổi DOM, đăng ký hoặc hủy đăng ký sự kiện, và nhiều hành động khác liên quan đến việc tương tác với bên ngoài component.
Có 2 loại side effect chính là:
Effects không cần Cleanup
Effects cần phải Cleanup

#31. Cần lưu ý gì khi sử dụng dependencies ?
Lựa chọn đúng dependencies:
Chọn dependencies sao cho nó đảm bảo hiệu suất tốt nhất và chỉ chạy hiệu ứng khi cần thiết.
Tránh sử dụng dependencies quá nhiều hoặc quá ít:Sử dụng chỉ những dependencies cần thiết để đảm bảo rằng useEffect không chạy quá mức hoặc không đủ.

#32. Cơ chế so sánh các dependencies của useEffect là gì ?
React sử dụng một cơ chế so sánh đặc biệt để xác định xem liệu useEffect có nên chạy lại hay không dựa trên các dependencies được cung cấp. Cơ chế này được gọi là "dependency array comparison" hay "dependency comparison."
Cơ chế so sánh:
React sử dụng referential equality để so sánh dependencies trong mảng với giá trị của dependencies ở lần render trước. Nếu mảng dependencies hiện tại và mảng dependencies trước đó có cùng địa chỉ tham chiếu, React giả định rằng chúng không thay đổi và useEffect không cần chạy lại.
Đối với giá trị nguyên thủy (primitive values) như số, chuỗi, boolean, React so sánh chúng bằng giá trị thực tế. Nếu giá trị tương ứng trong dependencies thay đổi, useEffect sẽ chạy lại.
Đối với object và array, React so sánh chúng bằng referential equality. Nếu object hoặc array được tạo mới mỗi khi render, useEffect sẽ chạy lại.

#33. Side effect là gì ? Kể tên một số side effects bạn thường xử lý ?
"side effect" (hiệu ứng phụ) đề cập đến các thay đổi không mong muốn hay không dự kiến mà một hàm hay một phương thức có thể gây ra. Trong React, các side effects thường xuất hiện khi chúng ta thực hiện các tác vụ không thuần túy về tính toán, như tương tác với bên ngoài như API, thay đổi DOM, hoặc làm thay đổi trạng thái toàn cục.
Có 2 loại side effect chính là:
Effects không cần Cleanup
Effects cần phải Cleanup

#34. Clean up function của useEffect có chức năng gì ? Khi nào cần sử dụng ? Ví dụ.

Clean-up function trong useEffect là một hàm mà bạn có thể cung cấp để thực hiện các công việc dọn dẹp hoặc hủy các tài nguyên khi component unmount hoặc khi dependencies thay đổi. Chức năng này giúp tránh rò rỉ bộ nhớ, đảm bảo an toàn và làm sạch tài nguyên trước khi component bị xóa khỏi cây DOM.
Sử dụng khi: Huỷ đăng kí sự kiện, huỷ đăng kí Timer hoặc Interval, huỷ Fetch API,..

#35. useCallback và useMemo là gì ? Giống và khác nhau thế nào ?
useCallback và useMemo là hai hook trong React được thiết kế để tối ưu hóa hiệu suất của ứng dụng bằng cách lưu trữ kết quả tính toán trước đó. Tuy nhiên, chúng có mục đích và cách sử dụng khác nhau.
useCallback được sử dụng để giữ lại một phiên bản callback không thay đổi khi dependencies thay đổi. useCallback nhận vào một hàm callback và một mảng dependencies. Nó trả về một phiên bản callback mới chỉ khi một trong các dependencies thay đổi.
useMemo được sử dụng để lưu trữ kết quả của một hàm tính toán và trả về kết quả đã lưu trữ khi dependencies không thay đổi. useMemo nhận vào một hàm và một mảng dependencies. Nó trả về kết quả của hàm tính toán được lưu trữ và chỉ tính toán lại khi một trong các dependencies thay đổi.

#36. Custom hooks là gì ? Hãy kể tên những custom hooks mà bạn thường dùng ?

Custom hooks trong React là một cách để tái sử dụng logic của React state và lifecycle trong các component function. Bằng cách sử dụng custom hooks, bạn có thể tách biệt logic của component ra khỏi component chính và chia sẻ logic đó giữa các component khác nhau.
Một số custom hook: useForm,….

#37. React - router - dom là gì ? Tại sao phải sử dụng react - router - dom ?
react-router-dom là một thư viện React giúp quản lý định tuyến (routing) trong ứng dụng React. Nó cung cấp các thành phần và API để giúp bạn xác định cách các thành phần của ứng dụng được hiển thị dựa trên URL hiện tại. Thư viện này giúp bạn thực hiện các chuyển đổi giữa các trang và quản lý trạng thái của định tuyến trong ứng dụng web.
Sử dụng react-router-dom để : điều hướng, cập nhật URL và trạng thái trình duyệt,…

#38. Nested routing là gì ? Hãy mô tả cách triển khai ?

Nested routing, hay định tuyến lồng nhau, là một cơ chế trong react-router-dom cho phép bạn nhúng và quản lý các route con bên trong route cha. Điều này giúp tổ chức và quản lý mã nguồn một cách hiệu quả hơn, đặc biệt khi bạn cần xây dựng giao diện người dùng có cấu trúc phức tạp với nhiều mức độ sâu và chức năng.

#39. < Outlet > là gì ?

<Outlet> là một thành phần quan trọng trong thư viện react-router-dom giúp bạn triển khai nested routing. Thành phần này thường được sử dụng trong Route để đánh dấu vị trí nơi các thành phần con của route cha sẽ được hiển thị. Nó giống như một "khe cắm" (outlet) cho các thành phần con của route cha.

#40. Có những cách nào để chuyển trang bằng react-router-dom?
Sử dụng <Link>: component <Link> giúp tạo ra các liên kết dẫn đến các route khác mà không làm tải lại trang.
Sử dụng useNavigate
Sử dụng useHistory
Sử dụng history Prop trong component

#41. Private route là gì? Hãy mô tả cách triển khai?
Private Route là một khái niệm được sử dụng để bảo vệ các route trong ứng dụng web, đặc biệt là những trang yêu cầu người dùng đã đăng nhập để truy cập. Một Private Route thường kiểm tra xem người dùng đã đăng nhập hay chưa và chuyển hướng họ đến trang đăng nhập nếu cần thiết.

#42. Làm sao để xử lý khi có lỗi 404 page not found?
Để xử lý trang 404 "Page Not Found" trong ứng dụng React sử dụng react-router-dom, bạn có thể sử dụng thành phần <Route> không có prop path. Điều này sẽ làm cho route này trở thành route mặc định, được hiển thị khi không có route nào khớp với URL hiện tại.

#43. Làm sao để truyền và lấy được params thông qua URL?
sử dụng useParams hook hoặc thông qua props của thành phần.

#44. Props drilling là gì?
- Prop drilling là điều xảy ra khi bạn cần truyền dữ liệu từ một component cha xuống một component thấp hơn trong cây component, drilling - khoan vào các component khác mà các component đấy có thể không cần giá trị props, trong khi chỉ một vài component là cần thôi.
- Thỉnh thoảng vấn đề prop drilling có thể được phòng tránh bằng việc refactor component, tránh việc chia component thành nhỏ hơn và giữ các state chung vào trong component cha chung gần nhất. Với việc bạn cần chia sẻ state giữa các component mà không phụ thuộc vào vị trí xa hay gần trong cây component, bạn có thể sử dụng React Context API hay thư viện quản lý state tập trung ví dụ như Redux.

#45. Redux là gì? Mô hình hoạt động của redux như thế nào?
Redux là một thư viện JavaScript mở được dùng để quản lý trạng thái ứng dụng. React sử dụng Redux để xây dựng giao diện người dùng. Đây là vùng chứa trạng thái có thể dự đoán được cho các ứng dụng JavaScript và được sử dụng để quản lý trạng thái của toàn bộ ứng dụng.

#46. Sự khác nhau giữa Action và Reducer là gì?
Action:
Là đối tượng chứa thông tin về hành động và dữ liệu cần thiết để thay đổi trạng thái.
Được tạo ra thông qua hàm hành động (action creator).
Chỉ mô tả "đã xảy ra điều gì".
Reducer:
Là hàm xử lý việc thay đổi trạng thái dựa trên action nhận được.
Nhận vào một trạng thái và một action, sau đó trả về trạng thái mới.
Thực hiện thay đổi trạng thái của ứng dụng dựa trên hành động đã xảy ra.

#47. Làm sao để dispatch một Action?
Để dispatch một Action trong Redux, cần sử dụng hàm dispatch được cung cấp bởi Redux Store. Các hàm dispatch được sử dụng để gửi một Action đến Reducer để thay đổi trạng thái của ứng dụng.

#48. Middleware là gì? Khi nào cần sử dụng middleware?
Middleware là một lớp trung gian giữa việc dispatch một Action và khi nó đến Reducer. Nó cung cấp một cơ hội để thực hiện các xử lý trung gian, theo dõi, hay thậm chí là thay đổi Action trước khi nó đến Reducer.
Sử dụng middleware khi: logging, thực hiện xử lý bất đồng bộ, chuyển hoá Action. ….

#49. Làm sao để truy xuất dữ liệu từ store?
Có thể sử dụng hook useSelector hoặc có thể kết hợp với connect nếu đang sử dụng class component.

#50. Context API là gì? Cách thức hoạt động của Context API như thế nào? Context API có thể thay thế được Redux được không?
-Context API được cung cấp bởi React để giải quyết vấn đề chia sẻ state giữa các component trong một ứng dụng. Trước khi context (dịch nôm na là bối cảnh) được giới thiệu, giải pháp duy nhất là sử dụng một thư viện quản lý state, ví dụ như Redux. Tuy nhiên, nhiều nhà phát triển cảm thấy Redux cung cấp nhiều thứ phức tạp không cần thiết, đặc biệt là với ứng dụng nhỏ.
Context API trong React cung cấp một cách để truyền dữ liệu giữa các thành phần mà không cần sử dụng props. Quy trình hoạt động của Context API như sau:
Tạo Context: sử dụng createContext để tạo một đối tượng Context
Cung cấp dữ liệu: sử dụng component Provider để bao bọc các thành phần cung cấp dữ liệu và truyền giá trị thông qua thuộc tính value.
Tiêu thụ dữ liệu: Sử dụng hook useContext trong các thành phần con để tiêu thụ dữ liệu từ Context.
Context API có thể thay thế Redux trong một số trường hợp, nhất là đối với các ứng dụng nhỏ hoặc có quy mô đơn giản, độ phức tạp thấp.

#51. So sánh Context API và Redux?
Context API: thích hợp cho các ứng dụng nhỏ và đơn giản, giảm độ phức tạp của mã nguồn. Cho phép truyền dữ liệu giữa các thành phần mà không cần sử dụng props.
Redux: thích hợp với ứng dụng lớn và phức tạp, nơi quản lý trạng thái trở nên phức tạp.

Dom Áo là gì
là một chức năng của React
React giữ lại một bản nhỏ của DOM thật và khi trang thái của một đối tượng thay đổi trên DOM ảo thì chỉ việc thay đổi đối tượng đó trên DOM thật thôi thay vì cập nhật tất cả

Arroww function và function khác nhau như nào